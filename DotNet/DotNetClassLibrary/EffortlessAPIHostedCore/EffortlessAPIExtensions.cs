/*************************************************
AUTO Generated by SSoT.me - 2019
    EJ Alexandra - An airtable Tool
    DO NOT MAKE CHANGES TO THIS FILE - THEY WILL BE OVERWRITTEN
*************************************************/
using JWT.Algorithms;
using JWT.Builder;
using Newtonsoft.Json;
using System.Collections.Generic;
using Newtonsoft.Json.Serialization;
using System;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Security.Authentication;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.ComponentModel;
using Newtonsoft.Json.Linq;

namespace EffortlessAPIHostedCore
{
    /// <summary>
    /// Helper methods to interact with airtable
    /// </summary>
    public static class EffortlessAPIExtensions
    {
        public static bool IsAssignableTo(this Type fromType, Type toType)
        {
            return toType.IsAssignableFrom(fromType);
        }

        /// <summary>
        /// Turn any string or object into a string, even if it's null to start with
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static String SafeToString(this object value)
        {
            if (ReferenceEquals(value, null)) return String.Empty;
            else return value.ToString();
        }

        public static String ToSqlSafeString(this object value)
        {
            return value.SafeToString().Replace("'", "''");
        }

        /// <summary>
        /// Convert a string to it's proper (title) case
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static String ToPropperCase(this String value)
        {
            value = value.SafeToString();
            if (value.Length <= 1) return value.ToUpper();
            else return String.Join("", value.Substring(0, 1).ToUpper(), value.Substring(1));
        }


        /// <summary>
        /// Pluralize the word provided
        /// </summary>
        /// <param name="singularText">The singulra text to pluralize</param>
        /// <returns>The pluralized version of the word provided</returns>
        public static String Pluralize(this String singularText)
        {
            if (String.IsNullOrEmpty(singularText)) return String.Empty;
            //return pluralizer.Pluralize(singlularText.SafeToString());
            if (!singularText.IsPlural()) return singularText + "s";
            else return singularText;
        }

        /// <summary>
        /// Return true if the text provided is singular
        /// </summary>
        /// <param name="singularCandidate">Singular candidate</param>
        /// <returns>Returns true if the candidate word provided is singular</returns>
        public static bool IsSingular(this String singularCandidate)
        {
            if (String.IsNullOrEmpty(singularCandidate)) return false;
            //return pluralizer.IsSingular(singularCandidate.SafeToString());
            return !singularCandidate.SafeToString().EndsWith("s", StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Returns true if the text provided is pluarl
        /// </summary>
        /// <param name="pluralCandidate">The candidate word which might be plural</param>
        /// <returns>Returns true if the candidate word provided is plural</returns>
        public static bool IsPlural(this String pluralCandidate)
        {
            return !pluralCandidate.IsSingular();
        }

        /// <summary>
        /// Singularize the word provided
        /// </summary>
        /// <param name="singlularText">The plural text to Singularize </param>
        /// <returns>The singularized version of the word provided</returns>
        public static String Singuluralize(this String pluralText)
        {
            if (String.IsNullOrEmpty(pluralText)) return String.Empty;
            //return pluralizer.Singularize(pluralText.SafeToString());
            if (pluralText.IsPlural()) return pluralText.Substring(0, pluralText.Length - 1);
            else return pluralText;
        }

        private static JwtBuilder builder
        {
            get
            {
                return new JwtBuilder()
                            .WithAlgorithm(new HMACSHA256Algorithm())
                            .WithSecret("51DA01A3-8089-439C-89FD-C7227C631AB5");
            }
        }

        static string C_SECRET { get { return ConfigurationManager.AppSettings["JwtSecret"]; } }

        private class jwtWrapper<T>
        {
            public long exp { get; set; }
            public T user { get; set; }
        }

        public static T GetJWT<T>(this String jwt)
        {
            if (String.IsNullOrEmpty(jwt)) throw new Exception("Missing JWT in Payload.AccessToken");
            else
            {
                var decodedToken = builder
                        .MustVerifySignature()
                        .Decode(jwt);
                var apiUser = JsonConvert.DeserializeObject<jwtWrapper<T>>(decodedToken);
                var expDate = DateTimeOffset.FromUnixTimeSeconds(apiUser.exp);
                if (ReferenceEquals(apiUser, null) || (expDate < DateTime.UtcNow)) throw new AuthenticationException("Invalid jtw");
                else return apiUser.user;
            }
        }

        public static String GetJwt(this object userToken)
        {
            return builder.AddClaim("exp", DateTimeOffset.UtcNow.AddMonths(1).ToUnixTimeSeconds())
                          .AddClaim("user", userToken)
                          .Build();
        }
    }
}